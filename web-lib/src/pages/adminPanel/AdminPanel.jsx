import React, { useState, useEffect } from 'react';
import './AdminPanel.css';

const AdminPanel = () => {
    const [activeSection, setActiveSection] = useState('genres');

    return (
        <div className="admin-panel">
            <h1>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</h1>

            <div className="admin-navigation">
                <button onClick={() => setActiveSection('genres')}>–ñ–∞–Ω—Ä—ã</button>
                <button onClick={() => setActiveSection('authors')}>–ê–≤—Ç–æ—Ä—ã</button>
                <button disabled>–ö–Ω–∏–≥–∏ (—Å–∫–æ—Ä–æ)</button>
            </div>

            <div className="admin-content">
                {activeSection === 'genres' && <GenreSection />}
                {activeSection === 'authors' && <AuthorSection />}
                {activeSection === 'books' && (
                    <div className="coming-soon">–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</div>
                )}
            </div>
        </div>
    );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∂–∞–Ω—Ä–∞–º–∏
const GenreSection = () => {
    const [genres, setGenres] = useState([]);
    const [newGenre, setNewGenre] = useState('');
    const [editingGenre, setEditingGenre] = useState(null);
    const [error, setError] = useState('');

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∂–∞–Ω—Ä–æ–≤
    useEffect(() => {
        const fetchGenres = async () => {
            try {
                const response = await fetch('http://localhost:3000/api/genres');
                if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
                const data = await response.json();
                setGenres(data);
            } catch (err) {
                setError(err.message);
            }
        };
        fetchGenres();
    }, []);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–∞–Ω—Ä–∞
    const handleAddGenre = async () => {
        if (!newGenre.trim()) return;

        try {
            const response = await fetch('http://localhost:3000/api/genres', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name: newGenre })
            });

            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');

            const addedGenre = await response.json();
            setGenres([...genres, addedGenre]);
            setNewGenre('');
        } catch (err) {
            setError(err.message);
        }
    };

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞
    const handleUpdateGenre = async () => {
        if (!editingGenre || !editingGenre.name.trim()) return;

        try {
            const response = await fetch(`http://localhost:3000/api/genres/${editingGenre.genre_id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name: editingGenre.name })
            });

            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');

            const updatedGenre = await response.json();
            setGenres(genres.map(g => g.genre_id === updatedGenre.genre_id ? updatedGenre : g));
            setEditingGenre(null);
        } catch (err) {
            setError(err.message);
        }
    };

    // –£–¥–∞–ª–µ–Ω–∏–µ –∂–∞–Ω—Ä–∞
    const handleDeleteGenre = async (id) => {
        try {
            const response = await fetch(`http://localhost:3000/api/genres/${id}`, {
                method: 'DELETE'
            });

            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');

            setGenres(genres.filter(g => g.genre_id !== id));
        } catch (err) {
            setError(err.message);
        }
    };

    return (
        <div className="section">
            <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∞–Ω—Ä–∞–º–∏</h2>

            {error && <div className="error">{error}</div>}

            <div className="form">
                <input
                    type="text"
                    value={editingGenre ? editingGenre.name : newGenre}
                    onChange={(e) => editingGenre
                        ? setEditingGenre({...editingGenre, name: e.target.value})
                        : setNewGenre(e.target.value)
                    }
                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞"
                />

                {editingGenre ? (
                    <>
                        <button onClick={handleUpdateGenre}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        <button onClick={() => setEditingGenre(null)}>–û—Ç–º–µ–Ω–∞</button>
                    </>
                ) : (
                    <button onClick={handleAddGenre}>–î–æ–±–∞–≤–∏—Ç—å</button>
                )}
            </div>

            <div className="list">
                {genres.map(genre => (
                    <div key={genre.genre_id} className="item">
                        <span>{genre.name}</span>
                        <div>
                            <button onClick={() => setEditingGenre(genre)}>‚úèÔ∏è</button>
                            <button onClick={() => handleDeleteGenre(genre.genre_id)}>üóëÔ∏è</button>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ—Ä–∞–º–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∂–∞–Ω—Ä–∞–º)
const AuthorSection = () => {
    const [authors, setAuthors] = useState([]);
    const [newAuthor, setNewAuthor] = useState('');
    const [editingAuthor, setEditingAuthor] = useState(null);
    const [error, setError] = useState('');

    useEffect(() => {
        const fetchAuthors = async () => {
            try {
                const response = await fetch('http://localhost:3000/api/authors');
                if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
                const data = await response.json();
                setAuthors(data);
            } catch (err) {
                setError(err.message);
            }
        };
        fetchAuthors();
    }, []);

    const handleAddAuthor = async () => {
        if (!newAuthor.trim()) return;

        try {
            const response = await fetch('http://localhost:3000/api/authors', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name: newAuthor })
            });

            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');

            const addedAuthor = await response.json();
            setAuthors([...authors, addedAuthor]);
            setNewAuthor('');
        } catch (err) {
            setError(err.message);
        }
    };

    const handleUpdateAuthor = async () => {
        if (!editingAuthor || !editingAuthor.name.trim()) return;

        try {
            const response = await fetch(`http://localhost:3000/api/authors/${editingAuthor.author_id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name: editingAuthor.name })
            });

            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');

            const updatedAuthor = await response.json();
            setAuthors(authors.map(a => a.author_id === updatedAuthor.author_id ? updatedAuthor : a));
            setEditingAuthor(null);
        } catch (err) {
            setError(err.message);
        }
    };

    const handleDeleteAuthor = async (id) => {
        try {
            const response = await fetch(`http://localhost:3000/api/authors/${id}`, {
                method: 'DELETE'
            });

            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');

            setAuthors(authors.filter(a => a.author_id !== id));
        } catch (err) {
            setError(err.message);
        }
    };

    return (
        <div className="section">
            <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞–º–∏</h2>

            {error && <div className="error">{error}</div>}

            <div className="form">
                <input
                    type="text"
                    value={editingAuthor ? editingAuthor.name : newAuthor}
                    onChange={(e) => editingAuthor
                        ? setEditingAuthor({...editingAuthor, name: e.target.value})
                        : setNewAuthor(e.target.value)
                    }
                    placeholder="–ò–º—è –∞–≤—Ç–æ—Ä–∞"
                />

                {editingAuthor ? (
                    <>
                        <button onClick={handleUpdateAuthor}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        <button onClick={() => setEditingAuthor(null)}>–û—Ç–º–µ–Ω–∞</button>
                    </>
                ) : (
                    <button onClick={handleAddAuthor}>–î–æ–±–∞–≤–∏—Ç—å</button>
                )}
            </div>

            <div className="list">
                {authors.map(author => (
                    <div key={author.author_id} className="item">
                        <span>{author.name}</span>
                        <div>
                            <button onClick={() => setEditingAuthor(author)}>‚úèÔ∏è</button>
                            <button onClick={() => handleDeleteAuthor(author.author_id)}>üóëÔ∏è</button>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
};

export default AdminPanel;